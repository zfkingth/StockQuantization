// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyStock.Data;

namespace MyStock.WebAPI.Migrations
{
    [DbContext(typeof(StockContext))]
    [Migration("20200419073103_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyStock.Model.DayData", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<float>("Close")
                        .HasColumnType("float");

                    b.Property<float>("High")
                        .HasColumnType("float");

                    b.Property<float?>("HuanShouLiu")
                        .HasColumnType("float");

                    b.Property<float?>("LiuTongShiZhi")
                        .HasColumnType("float");

                    b.Property<float>("Low")
                        .HasColumnType("float");

                    b.Property<float>("Open")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<float>("Volume")
                        .HasColumnType("float");

                    b.Property<float?>("ZhangDieFu")
                        .HasColumnType("float");

                    b.Property<float?>("ZongShiZhi")
                        .HasColumnType("float");

                    b.HasKey("StockId", "Date");

                    b.ToTable("DayDataSet");
                });

            modelBuilder.Entity("MyStock.Model.MarginTotal", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("FinValue")
                        .HasColumnType("double");

                    b.HasKey("Date");

                    b.ToTable("MarginTotal");
                });

            modelBuilder.Entity("MyStock.Model.MarketDeal", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("BuyAmount")
                        .HasColumnType("double");

                    b.Property<double>("SellAmount")
                        .HasColumnType("double");

                    b.HasKey("Date");

                    b.ToTable("MarketDeal");
                });

            modelBuilder.Entity("MyStock.Model.Message", b =>
                {
                    b.Property<DateTime>("MesTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.HasKey("MesTime");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MyStock.Model.RealTimeData", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasMaxLength(20);

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<float>("Close")
                        .HasColumnType("float");

                    b.Property<float>("High")
                        .HasColumnType("float");

                    b.Property<float?>("HuanShouLiu")
                        .HasColumnType("float");

                    b.Property<float?>("LiuTongShiZhi")
                        .HasColumnType("float");

                    b.Property<float>("Low")
                        .HasColumnType("float");

                    b.Property<float>("Open")
                        .HasColumnType("float");

                    b.Property<string>("StockName")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<float>("Volume")
                        .HasColumnType("float");

                    b.Property<float?>("ZhangDieFu")
                        .HasColumnType("float");

                    b.Property<float?>("ZongShiZhi")
                        .HasColumnType("float");

                    b.HasKey("StockId", "Date");

                    b.ToTable("RealTimeDataSet");
                });

            modelBuilder.Entity("MyStock.Model.SearchResult", b =>
                {
                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("ActionParams")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ActionReslut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4096);

                    b.HasKey("ActionName", "ActionParams", "ActionDate");

                    b.ToTable("SearchResultSet");
                });

            modelBuilder.Entity("MyStock.Model.Sharing", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime>("DateGongGao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateChuXi")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateDengJi")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("PaiXi")
                        .HasColumnType("float");

                    b.Property<float>("SongGu")
                        .HasColumnType("float");

                    b.Property<float>("ZhuanZeng")
                        .HasColumnType("float");

                    b.HasKey("StockId", "DateGongGao");

                    b.ToTable("SharingSet");
                });

            modelBuilder.Entity("MyStock.Model.StaPrice", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FailNum")
                        .HasColumnType("int");

                    b.Property<int>("HighlimitNum")
                        .HasColumnType("int");

                    b.Property<int>("LowlimitNum")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.ToTable("StaPrice");
                });

            modelBuilder.Entity("MyStock.Model.Stock", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime>("RealDataUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StockName")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<int>("StockType")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.ToTable("StockSet");
                });

            modelBuilder.Entity("MyStock.Model.StockEvent", b =>
                {
                    b.Property<string>("EventName")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("LastAriseEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("LastAriseStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventName");

                    b.ToTable("StockEvents");
                });

            modelBuilder.Entity("MyStock.Model.StockNum", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("All")
                        .HasColumnType("double");

                    b.Property<double>("LiuTongA")
                        .HasColumnType("double");

                    b.HasKey("StockId", "Date");

                    b.ToTable("StockNumSet");
                });

            modelBuilder.Entity("MyStock.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<DateTime>("ExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .HasDefaultValue("user");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("User");
                });
#pragma warning restore 612, 618
        }
    }
}
